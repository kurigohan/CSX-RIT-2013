head	1.5;
access;
symbols;
locks
	andy:1.3.1.1; strict;
comment	@# @;


1.5
date	2013.11.14.22.41.02;	author andy;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.14.22.38.17;	author andy;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.14.21.54.42;	author andy;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	2013.11.14.21.53.29;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2013.11.14.21.50.57;	author andy;	state Exp;
branches;
next	;

1.3.1.1
date	2013.11.14.22.42.05;	author andy;	state Exp;
branches;
next	;


desc
@Lab 12: Activity 1 ManyThreads
@


1.5
log
@*** empty log message ***
@
text
@/**
 * The ManyThreads class creates and starts a number of threads specified by 
 * a command line argument.
 *
 * @@author Andy Nguyen
 */

import java.util.*;
 
public class ManyThreads {
    int threadTotal = 0; // total number of threads

    /**
     * Main method for test ManyThreads. Creates a ManyThreads object
     * with the given command line argument. The argument is the number of 
     * threads the ManyThreads object should create.
     *
     * @@param args      command line argument (must be an integer)
     * @@exception NumberFormatException if invalid number entered for 
     * command line arg
     */
    public static void main( String args[] ) throws NumberFormatException {
        try{
            if( args.length > 0 ) {
                int numOfThreads =  Integer.parseInt( args[0] );
                ManyThreads test = new ManyThreads( numOfThreads );
                test.createThreads();
            }
            else {
                System.err.println( "Usage:  java ManyThreads number-of-threads");
            }
        }
        catch( NumberFormatException e ) {
            System.err.println( "ManyThreads:  Invalid number" );
        }
    }

    /**
     * Contruct a new ManyThreads object.
     *
     * @@param total       the number of threads to create and start
     */
    public ManyThreads( int total ) {
        threadTotal = total;
    }

    /**
     * Creates a number of threads equal to the threadTotal and starts them.
     */
    public void createThreads() {
        
        for( int i = 0; i < threadTotal; ++i ) {
            // annoymous Thread class
            new Thread( ) {
                private int id; // thread identifier

                public Thread init( int identifier ) {
                    id = identifier;
                    // return instance of this class with id set to identifier
                    return this; 
                }

                public void run() {
                    System.out.println( "Hello I am thread " + id );
                }
            }.init( i ).start(); // initialize with id and then start
        } // end for loop
    }

}


/*
 * ManyThreads.java
 * 
 * Version: 
 *     $Id: ManyThreads.java,v 1.3 2013/11/14 21:54:42 andy Exp andy $
 * 
 * Revisions: 
 *     $Log: ManyThreads.java,v $
 *     Revision 1.3  2013/11/14 21:54:42  andy
 *     Fixed output.
 *
 *     Revision 1.2  2013/11/14 21:53:29  andy
 *     Implemented methods.
 *
 *     Revision 1.1  2013/11/14 21:50:57  andy
 *     Initial revision
 *
 *
 */@


1.4
log
@Modified main to get the absolute value of the total so negatdon't break the program.
@
text
@d25 1
a25 1
                int numOfThreads =  Math.abs( Integer.parseInt( args[0] ) );
@


1.3
log
@Fixed output.
@
text
@d18 1
d25 2
a26 2

                ManyThreads test = new ManyThreads( Integer.parseInt( args[0] ) );
d39 1
a39 1
     * Contructor for the class that takes an int value.
d77 1
a77 1
 *     $Id: ManyThreads.java,v 1.2 2013/11/14 21:53:29 andy Exp andy $
d81 3
@


1.3.1.1
log
@Comments.
@
text
@d38 1
a38 1
     * Contructs a new ManyThreads object.
d76 1
a76 1
 *     $Id: ManyThreads.java,v 1.3 2013/11/14 21:54:42 andy Exp andy $
a79 3
 *     Revision 1.3  2013/11/14 21:54:42  andy
 *     Fixed output.
 *
@


1.2
log
@Implemented methods.
@
text
@d63 1
a63 1
                    System.out.println( id );
d76 1
a76 1
 *     $Id: ManyThreads.java,v 1.1 2013/11/14 21:50:57 andy Exp andy $
d80 3
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1

d37 5
d76 1
a76 1
 *     $Id$
d79 4
a82 1
 *     $Log$
@
