head	1.4;
access;
symbols;
locks
	agn3691:1.3; strict;
comment	@# @;


1.4
date	2000.11.28.13.36.59;	author cs2;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.28.13.33.25;	author cs2;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.28.13.31.36;	author cs2;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.28.13.31.10;	author cs2;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Finished commenting the code and corrected minor style
errors.
@
text
@/*
 * InsertSort.java
 *
 * Version:
 *    $Id: InsertSort.java,v 1.3 2000/11/28 13:33:25 cs2 Exp cs2 $
 *
 * Revisions:
 *    $Log: InsertSort.java,v $
 *    Revision 1.3  2000/11/28 13:33:25  cs2
 *    Defined symbolic constants for the number of
 *    numbers to sort (ARRAY_SIZE) and for the maximum
 *    random number that will be generated (MAX_NUMBER)
 *
 *    Revision 1.2  2000/11/28 13:31:36  cs2
 *    Added import statement for Random class
 *
 *    Revision 1.1  2000/11/28 13:31:10  cs2
 *    Initial revision
 *
 */

import java.util.Random;

/**
 * Sort an array using an insertion sort.
 */

public class InsertSort {

    /**
     * The main method.  Fill an array with random numbers performing
     * an insertion sort as each number is generated.  After the numbers
     * have been generated and inserted into the array, the contents of
     * the array will be printed.
     *
     * @@param args[] the command line arguments (ignored)
     */

    public static void main( String args[] ) {
        final int ARRAY_SIZE = 10;   // Number of numbers to sort
        final int MAX_NUMBER = 100;  // Largest number to sort

	int data[] = new int[ ARRAY_SIZE ];   // Array that will be sorted
        int tmp = 0;                          // Temp storage
        Random randomNumbers = new Random();  // Generator for random numbers

	// Sort ARRAY_SIZE random numbers between 0 and MAX_NUMBER

	for ( int i = 0; i < data.length; i++ ) {

            // Add the newest number to the end of the array

	    data[ i ] = randomNumbers.nextInt( MAX_NUMBER );

	    // Starting at the bottom of the array, move the last number
            // up until it is in the correct position.

            for ( int j = i - 1; j >= 0 && data[ j + 1 ] < data[ j ]; j-- ) {
                tmp = data[ j ];
                data[ j ] = data[ j + 1];
                data[ j + 1 ] = tmp;
            }
	}

	// Print out the sorted array

	for ( int i = 0; i < data.length; i++ ) {
	    System.out.println( data[ i ] );
        }
    }
    
} // InsertSort
@


1.3
log
@Defined symbolic constants for the number of
numbers to sort (ARRAY_SIZE) and for the maximum
random number that will be generated (MAX_NUMBER)
@
text
@d5 1
a5 1
 *    $Id: InsertSort.java,v 1.2 2000/11/28 13:31:36 cs2 Exp cs2 $
d9 5
d31 4
a34 1
     * The main method.
d36 1
a36 1
     * @@param args[] the command line arguments
d40 2
a41 2
        final int ARRAY_SIZE = 10;
        final int MAX_NUMBER = 100;
d43 3
a45 3
	int data[] = new int[ ARRAY_SIZE ];
        int tmp = 0;
        Random randomNumbers = new Random();
d67 1
a67 1
	for ( int i = 0; i < data.length; i++ )
d69 1
@


1.2
log
@Added import statement for Random class
@
text
@d5 1
a5 1
 *    $Id: InsertSort.java,v 1.1 2000/11/28 13:31:10 cs2 Exp cs2 $
d9 3
d32 4
a35 1
	int data[] = new int[ 10 ];
d39 1
a39 1
	// Sort 10 random numbers between 0 and 100
d45 1
a45 1
	    data[ i ] = randomNumbers.nextInt( 100 );
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *    $Id$
d8 4
a11 1
 *    $Log$
d14 2
@
