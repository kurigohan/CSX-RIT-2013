head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2013.09.15.01.05.36;	author agn3691;	state Exp;
branches;
next	1.3;

1.3
date	2013.09.15.00.46.13;	author agn3691;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.14.22.23.35;	author agn3691;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.17.14.37.28;	author cs2;	state Exp;
branches;
next	;


desc
@@


1.4
log
@earnedInterest sets interestEarned in BankAccount
@
text
@/*
 * MoneyMarket.java
 * 
 * Version: 
 *     $Id: MoneyMarket.java,v 1.3 2013/09/15 00:46:13 agn3691 Exp agn3691 $
 * 
 * Revisions: 
 *     $Log: MoneyMarket.java,v $
 *     Revision 1.3  2013/09/15 00:46:13  agn3691
 *     Fixed error in earnInterest method
 *
 *     Revision 1.2  2013/09/14 22:23:35  agn3691
 *     Implemented methods.
 *
 *     Revision 1.1  2003/03/17 14:37:28  cs2
 *     Initial revision
 *
 */

/**
 * The MoneyMarket class represents a money market account. 
 * 
 * @@author Andy Nguyen
 */

public class MoneyMarket extends BankAccount {

    /**
     * The minimum amount that must be kept in the account at all times;
     * interest is earned only on the amount over the minimum 
     *  - currently $1000.
     */
    private static final int MINIMUM_BALANCE = 1000;

    /**
     * The interest rate for balances greater than the minimum - currently 5%. 
     */
    private static final int INTEREST_RATE = 5;

    /**
     * A constructor for a MoneyMarket object. It accepts the amount
     * of money deposited when the account is created.
     * You are guaranteed that the parameter will always be greater than
     * the minimum amount required.
     * 
     * @@param newMoney The amount of money deposited when the account
     *                 is opened.
     */

    public MoneyMarket( int newMoney ) {
        super( newMoney );
        setInterestRate( INTEREST_RATE );
    }

    /**
     * Money can only be withdrawn from this account if the 
     * minimum will remain. If the amount wanted will make the 
     * account go below the minimum, print the following message
     * to standard error "Insufficient funds" 
     * 
     * @@param amountWanted The amount of money to withdraw
     */

    public void withdrawMoney( int amountWanted ) {
        if ( getCurrentBalance() - amountWanted < MINIMUM_BALANCE ) {
            System.err.println("Insufficient funds");
        }
        else {
            super.withdrawMoney( amountWanted );
        }
    }

    /**
     * Earn interest on this account. With money market accounts
     * no interest is earned on the minimum that must always be 
     * kept in the account. Interest is only earned on everything
     * over that amount.  Interest earned is considered to be a deposit.
     */

    public void earnInterest() {
        int currentBalance = getCurrentBalance();
        if(currentBalance > MINIMUM_BALANCE ) {
            int earnedInterest = (int) Math.round((currentBalance-MINIMUM_BALANCE)*(getInterestRate()/100.0));
            setInterestEarned( earnedInterest );
            depositMoney( earnedInterest );
        }
    }

    /**
     * What kind of account am I?
     * 
     * @@return "MoneyMarket" 
     */

    public String toString() {
        return "MoneyMarket";
    }
} // MoneyMarket
@


1.3
log
@Fixed error in earnInterest method
@
text
@d5 1
a5 1
 *     $Id: MoneyMarket.java,v 1.2 2013/09/14 22:23:35 agn3691 Exp agn3691 $
d9 3
d83 3
a85 2
            double earnedInterest = Math.round((currentBalance-MINIMUM_BALANCE)*(getInterestRate()/100.0));
            depositMoney( (int) earnedInterest );
@


1.2
log
@Implemented methods.
@
text
@d5 1
a5 1
 *     $Id: MoneyMarket.java,v 1.1 2003/03/17 14:37:28 cs2 Exp agn3691 $
d9 3
d30 1
d35 1
d49 1
a49 1
        setInterestRate( 5 );
d62 1
a62 1
        if ( getCurrentBalance() - amountWanted < 1000 ) {
d79 4
a82 1
        depositMoney( currentBalance - 1000 ) * Math.round(getInterest()/100) );
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *     $Log$
d17 1
a17 2
 * @@author Lois Rixner
 * @@author Paul Tymann
d43 2
d57 6
d73 2
d84 1
@
