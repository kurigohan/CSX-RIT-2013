head	1.6;
access;
symbols;
locks
	andy:1.6; strict;
comment	@# @;


1.6
date	2013.10.06.06.27.05;	author andy;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.06.05.49.44;	author andy;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.06.05.43.30;	author andy;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.06.05.03.36;	author andy;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.06.03.42.44;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.03.22.30.14;	author andy;	state Exp;
branches;
next	;


desc
@Lab 6 - MinHeap
@


1.6
log
@Renamed heapify to siftUp
Added siftDown method to be used with remove
@
text
@/**
 * MinHeap represents a heap data structure, where the parent
 * node is always has less priority or value than the child node.
 * An ArrayList is used to hold the elements of the heap. By manipulating
 * the index we can easily traverse up and down the heap structure.
 *
 * @@author Andy Nguyen
 */

import java.lang.*;
import java.util.*;
public class MinHeap implements Heap<Comparable> {

    private ArrayList<Comparable> heap; // the arraylist representing the minheap
    private int size; // number of elements in the heap

    public static void main( String[] args ) {
        MinHeap mh = new MinHeap();

        mh.insert( 5 );
        mh.insert( 10 );
        mh.insert( 13 );
        mh.insert( 3 );
        mh.insert( 2 );
        mh.insert( 14 );
        mh.insert( 11 );
        mh.insert( 1 );
        System.out.println(mh);

        Integer[] test = new Integer[] {1 , 4 ,5, 2, 10, 33, 11, 6, 0};
        MinHeap mh2 = new MinHeap(test);
        System.out.println(mh2);

        for(int i = 0; i < 5; ++i ) {
            System.out.println("\n" + mh2);
            System.out.println("Removed: " + mh2.remove());
            System.out.println(mh2);
        }
    }

    /**
     * The default constructor for MinHeap.
     */
    public MinHeap() {
        heap = new ArrayList<Comparable>();
        // add an element to to index 0 so index 1 will be the "start" of the heap
        // this ensures that index/2 will give us the location of the parent 
        heap.add( null ); 
        size = 0;
    }


    /**
     * Constructor for MinHeap that accepts an array of Objects.
     */
   public MinHeap ( Comparable[] elements ) {
        heap = new ArrayList<Comparable>();
        heap.add( null ); 
        size = 0;
        for( Comparable e : elements ) {
            insert( e );
        }
    }

    /**
     * @@return the value at the top of the heap
     */
    public Comparable peek() {
        return heap.get( 1 );
    }   

    /**
     * remove and return the value at the top of the heap
     * @@return value at top of the heap
     */
    public Comparable remove() {
        // get the root 
        Comparable top = peek();
        // move the last element to the root
        heap.set( 1, heap.get( size ) );
        // remove the last element from the heap
        heap.remove( size );
        --size;
        // sift down so all elements satify minheap conditions
        siftDown();

        return top;
    }


    /**
     * insert a new value into the heap
     */
    public void insert( Comparable data ) {
        heap.add( data );
        ++size;
        siftUp();
    }


    /**
     * Reorder the heap so parent is always less than child
     */
    private void siftUp() throws ClassCastException {
        int childIndex = size;
        int parentIndex = childIndex / 2;
        Comparable child = heap.get( childIndex  );
        Comparable parent = heap.get( parentIndex );
        try {
            while( parentIndex >= 1 ) { 
                if( child.compareTo( parent ) < 0 ) {
                    // if child node less than parent, swap them
                    heap.set( childIndex, parent);
                    heap.set( parentIndex, child );
                    childIndex = parentIndex;
                    parent = heap.get( parentIndex /= 2 );
                }
                else {
                    break;
                }
            } // end while
        }
        catch( ClassCastException e ){
            System.err.println( e );
            System.exit( -1 );
        }
    }

    public void siftDown() throws ClassCastException {
        try{

        }
        catch( ClassCastException e ) {
            System.err.println( e );
            System.exit( -1 );
        }
    }

    public String toString() {
        String str = "";
        for( int i = 1; i <= size; ++i ) {
            str += heap.get( i ) + " ";
        }
        return str;

    }
}



/*
 * MinHeap.java
 * 
 * Version: 
 *     $Id: MinHeap.java,v 1.5 2013/10/06 05:49:44 andy Exp andy $
 * 
 * Revisions: 
 *     $Log: MinHeap.java,v $
 *     Revision 1.5  2013/10/06 05:49:44  andy
 *     Implemented remove method
 *
 *     Revision 1.4  2013/10/06 05:43:30  andy
 *     Implemented constructor for array of elements
 *     Fixed bug in siftUp method - wasn't checking the root element
 *
 *     Revision 1.3  2013/10/06 05:03:36  andy
 *     siftUp method working correctly
 *     using Comparable type for parameter
 *     added main method
 *
 *     Revision 1.2  2013/10/06 03:42:44  andy
 *     implemented insert and siftUp
 *
 *     Revision 1.1  2013/10/03 22:30:14  andy
 *     Initial revision
 *
 */@


1.5
log
@Implemented remove method
@
text
@d35 1
d77 6
d84 4
a87 1
        return heap.remove( 1 );
d97 1
a97 1
        heapify();
d104 1
a104 1
    private void heapify() throws ClassCastException{
d110 1
a110 1
            while( parentIndex >= 1 ) {
d125 11
a135 1
            System.exit(-1);
d155 1
a155 1
 *     $Id: MinHeap.java,v 1.4 2013/10/06 05:43:30 andy Exp andy $
d159 3
d164 1
a164 1
 *     Fixed bug in heapify method - wasn't checking the root element
d167 1
a167 1
 *     heapify method working correctly
d172 1
a172 1
 *     implemented insert and heapify
@


1.4
log
@Implemented constructor for array of elements
Fixed bug in heapify method - wasn't checking the root element
@
text
@d34 4
d76 2
a77 1
        return null;
d135 1
a135 1
 *     $Id: MinHeap.java,v 1.3 2013/10/06 05:03:36 andy Exp andy $
d139 4
@


1.3
log
@heapify method working correctly
using Comparable type for parameter
added main method
@
text
@d2 4
a5 1
 * 
d10 1
a10 1
import java.lang.Comparable;
d13 3
a15 2
    private List<Comparable> heap;
    private int size;
d20 8
a27 9
       // mh.insert( new Comparable( 3 ));
        mh.insert( new Integer( 1 ));
        mh.insert( new Integer( 10 ));
        mh.insert( new Integer( 13 ));
        mh.insert( new Integer( 3 ));
        mh.insert( new Integer( 2 ));
        mh.insert( new Integer( 14 ));
        mh.insert( new Integer( 11 ));
        mh.insert( new Integer( 1 ));
d30 3
a32 1
      //  System.out.println(mh);
d41 3
a43 1
        heap.add( null );
d51 8
a58 4
   /* public MinHeap ( Object[] elements ) {
        heap = new ArrayList<Comparable>( Arrays.asList( elements ) );
        size = elements.length;
    }*/
d75 4
d86 4
a89 1
    private void heapify() {
d94 18
a111 14

        while( parentIndex > 1 ) {
            if( child.compareTo( parent ) < 0 ) {
                // if child node less than parent, swap them
                heap.set( childIndex, parent);
                heap.set( parentIndex, child );
                childIndex = parentIndex;
                parent = heap.get( parentIndex /= 2 );
            }
            else {
                break;
            }
        } // end while

d130 1
a130 1
 *     $Id: MinHeap.java,v 1.2 2013/10/06 03:42:44 andy Exp andy $
d134 5
@


1.2
log
@implemented insert and heapify
@
text
@d9 2
a10 2
public class MinHeap implements Heap<Comparable<Object>> {
    private List<Comparable<Object>> heap;
d13 18
d35 2
a36 1
        heap = new ArrayList<Comparable<Object>>();
d52 3
a54 3
    public Comparable<Object> peek() {
        return heap.get( 0 );
    }
d60 1
a60 1
    public Comparable<Object> remove() {
d64 1
a64 1
    public void insert( Comparable<Object> data ) {
d72 4
a75 5
        int index = size-1;
        int childIndex = index;
        int parentIndex = index / 2;
        Comparable<Object> child = heap.get( childIndex );
        Comparable<Object> parent = heap.get( parentIndex );
d77 1
a77 1
        while( parentIndex > 0 ) {
a81 1
                child = parent;
d85 3
d91 9
d108 1
a108 1
 *     $Id: MinHeap.java,v 1.1 2013/10/03 22:30:14 andy Exp andy $
d112 3
@


1.1
log
@Initial revision
@
text
@d7 6
a12 1
public class MinHeap implements Heap<Object> {
d14 1
a14 1
     * The constructor for MinHeap
d16 4
a19 1
    public MinHeap ( ){
d21 14
d37 5
a41 1
    public Object peek() {
d45 5
a49 1
    public Object remove() {
a50 2
        return null;
    }
d52 17
a68 1
    public void insert( Object value ) {
a70 1

d79 1
a79 1
 *     $Id$
d82 4
a85 1
 *     $Log$
@
