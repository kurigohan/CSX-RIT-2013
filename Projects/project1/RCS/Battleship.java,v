head	1.11;
access;
symbols;
locks
	agn3691:1.11; strict;
comment	@# @;


1.11
date	2013.09.22.00.22.39;	author agn3691;	state Exp;
branches;
next	1.10;

1.10
date	2013.09.21.22.43.53;	author agn3691;	state Exp;
branches;
next	1.9;

1.9
date	2013.09.21.21.47.01;	author agn3691;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.21.18.39.25;	author agn3691;	state Exp;
branches;
next	1.7;

1.7
date	2013.09.21.07.12.44;	author agn3691;	state Exp;
branches;
next	1.6;

1.6
date	2013.09.21.03.58.57;	author agn3691;	state Exp;
branches;
next	1.5;

1.5
date	2013.09.21.02.11.07;	author agn3691;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.21.01.35.59;	author agn3691;	state Exp;
branches;
next	1.3;

1.3
date	2013.09.19.23.25.09;	author agn3691;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.18.20.37.41;	author agn3691;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	2013.09.18.19.22.34;	author agn3691;	state Exp;
branches;
next	;

1.2.1.1
date	2013.09.21.01.37.43;	author agn3691;	state Exp;
branches;
next	;


desc
@Contains the main method to run the program. Represents a battleship game.
@


1.11
log
@*** empty log message ***
@
text
@/**
 * The Battleship class starts the program to play battleship. It contains the
 * methods to execute game commands and keep track of the game stats. The program
 * is nitialized by specifying an int for the board size and string for the 
 * input file. Once the program as begun, the user is prompted for
 * commands.
 *
 * @@author Andy Nguyen
 */

import java.io.*;
import java.util.Scanner;

public class Battleship {

    /**
     * Number of arguments needed to execute fire command.
     */
    private static final int FIREARGS = 3;
    /**
     * Message to display when all ships have been sunk.
     */
    public static final String GAMEOVERMSG = "You win!";

    private static Board board = null;
    private static PrintWriter out = null;
    private static BufferedReader in = null;
    private static Command command = null;

   /**
     * Main method for program.
     *
     * @@param      args      command line arguments 
     * @@exception IOException 
     */
    public static void main( String args[] ) throws IOException, 
        NumberFormatException  {

        // set output destination and input source
        out = new PrintWriter( System.out, true ); 
        in = new BufferedReader( new InputStreamReader( System.in ) );

        int size = 0;           // size of the game board
        String fileName = "";   // name of the file

        try {
            if( args.length > 1 ) { // check for valid # of command arguments
                size = Integer.parseInt( args[0] );

                if( size < Board.MINSIZE ){
                    System.err.println("Board must be at most " + Board.MINSIZE + 
                        " by " + Board.MINSIZE + ".");
                }
                else if( size > Board.MAXSIZE ){
                    System.err.println("Board must be at most " + Board.MAXSIZE + 
                        " by " + Board.MAXSIZE + ".");
                }
                else {
                    fileName = args[1];
                    board = new Board( size );
                    board.initialize(fileName);

                    // exit program if no ships were added to board
                    if( board.getShipCount() == 0 ) {
                        System.exit(1);
                    }
                    out.println(board);

                    // command object used to execute commands
                    command = new Command( board, out ); 

                    // keep prompting the user for commands until QUIT command
                    // is entered.
                    while( !command.getExitFlag() ) {
                        promptUser();
                    }
                }
            }
            else {
                throw new NumberFormatException();
            }
        }
        catch( NumberFormatException e ) {
            System.err.println("Usage: Battleship N config-file \n" +
                "Usage: java Battleship N config-file");
        }

        System.exit(0); // exit the program
    }

    /**
     * Prompt the user for commands.
     *
     * @@exception IOException if line could not be read.
     */
    private static void promptUser() throws IOException{

        out.print("> ");
        out.flush();
        String cmd = in.readLine();
        // make sure cmd is not an empty string
        if( cmd.length() > 0 ) {
            command.execute( cmd );
        }
    }

}

/*
 * Battleship.java
 * 
 * Version: 
 *     $Id: Battleship.java,v 1.10 2013/09/21 22:43:53 agn3691 Exp agn3691 $
 * 
 * Revisions: 
 *     $Log: Battleship.java,v $
 *     Revision 1.10  2013/09/21 22:43:53  agn3691
 *     More comments.
 *
 *     Revision 1.9  2013/09/21 21:47:01  agn3691
 *     Added more comments and changed main to use BufferedReader instead of Scanner to read input.
 *
 *     Revision 1.8  2013/09/21 18:39:25  agn3691
 *     Added more error checking.
 *
 *     Revision 1.7  2013/09/21 07:12:44  agn3691
 *     Added and implemented promptUser method.
 *
 *     Revision 1.6  2013/09/21 03:58:57  agn3691
 *     Added some error checking.
 *
 *     Revision 1.5  2013/09/21 02:11:07  agn3691
 *     Comments
 *
 *     Revision 1.3  2013/09/19 23:25:09  agn3691
 *     Moved some methods to Board class.
 *
 *     Revision 1.2  2013/09/18 20:37:41  agn3691
 *     Added PrintWriter object to print output to given source.
 *
 *     Revision 1.1  2013/09/18 19:22:34  agn3691
 *     Initial revision
 *
 *
 */@


1.10
log
@More comments.
@
text
@d113 1
a113 1
 *     $Id: Battleship.java,v 1.9 2013/09/21 21:47:01 agn3691 Exp agn3691 $
d116 4
a119 1
 *     $Log: Battleship.java,v $
@


1.9
log
@Added more comments and changed main to use BufferedReader instead of Scanner to read input.
@
text
@d34 1
d93 2
d113 1
a113 1
 *     $Id: Battleship.java,v 1.8 2013/09/21 18:39:25 agn3691 Exp agn3691 $
d117 3
@


1.8
log
@Added more error checking.
@
text
@d3 4
a6 1
 * methods to execute game commands and keep track of the game stats.
d27 1
a27 1
    private static Scanner in = null;
d30 5
d40 1
a40 1
        in = new Scanner( System.in );
d42 2
a43 2
        int size = 0; // size of the game board
        String fileName = "";
d67 7
a73 2
                    command = new Command( board, out );
                    while( true ) {
d86 2
d90 4
a93 3
    private void updateStats() {

    }
d95 1
a95 2
    private static void promptUser() {
        out.print(">");
d97 1
a97 2
        String cmd = in.nextLine();

a105 9









d110 1
a110 1
 *     $Id: Battleship.java,v 1.7 2013/09/21 07:12:44 agn3691 Exp agn3691 $
d114 3
@


1.7
log
@Added and implemented promptUser method.
@
text
@d13 9
d75 3
d82 6
a87 1
        command.execute(in.nextLine());
d89 1
d105 1
a105 1
 *     $Id: Battleship.java,v 1.6 2013/09/21 03:58:57 agn3691 Exp agn3691 $
d109 3
@


1.6
log
@Added some error checking.
@
text
@d2 3
a4 2
 * The Battleship class starts the program to play battleship.
 * 
d14 3
a16 1
    private static PrintWriter output = null;
d19 5
a23 1
    NumberFormatException  {
a24 1
        output = new PrintWriter(System.out, true);    // set output destination
d27 1
d33 1
a33 1
                    System.err.println("Board must be at most " + Board.MINSIZE+ 
d37 1
a37 1
                    System.err.println("Board must be at most " + Board.MAXSIZE+ 
d49 5
a53 2
                    
                    System.out.println(board);
d57 1
a57 2
                System.err.println("Usage: Battleship N config-file\nUsage: " +
                    "java Battleship N config-file");
d67 5
d74 9
d87 1
a87 1
 *     $Id: Battleship.java,v 1.5 2013/09/21 02:11:07 agn3691 Exp agn3691 $
d91 3
@


1.5
log
@Comments
@
text
@d15 3
a17 1
    public static void main( String args[] ) throws IOException {
a20 14
        if( args.length > 1 ) { // check for valid number of command arguments
            size = Integer.parseInt( args[0] );
            fileName = args[1];
            board = new Board( size, size );
        }
        else {
            System.err.println("Usage: Battleship N config-file\nUsage: java Battleship N config-file");
        }

    }
    private static void readFile( String fileName ) throws IOException {

        BUfferedReader br = null;

d22 2
a23 2
            // open the file to read
            br =  new BufferedReader ( new FileReader( fileName ) ) ;
d25 24
a48 3
            // read each character in the file
            while ( br.readLine() ) {
                System.out.println( br.next() );
a49 3
        } 
        catch ( IOException e ) {
            System.err.println( "Cannot open file " + fileName + "." );
d51 3
a53 4
        finally {
            if ( br != null ) {
                br.close(); // close the file
            }
a57 1

d64 1
a64 1
 *     $Id: Battleship.java,v 1.3 2013/09/19 23:25:09 agn3691 Exp agn3691 $
d67 6
a72 3
 *     $Log: Battleship.java,v $
 *     Revision 1.3  2013/09/19 23:25:09  agn3691
 *     Moved some methods to Board class.
@


1.4
log
@Added comments.
@
text
@@


1.3
log
@Moved some methods to Board class.
@
text
@d60 1
a60 1
 *     $Id: Battleship.java,v 1.2 2013/09/18 20:37:41 agn3691 Exp agn3691 $
d63 4
a66 1
 *     $Log: Battleship.java,v $
@


1.2
log
@Added PrintWriter object to print output to given source.
@
text
@a0 14
/*
 * Battleship.java
 * 
 * Version: 
 *     $Id: Battleship.java,v 1.1 2013/09/18 19:22:34 agn3691 Exp agn3691 $
 * 
 * Revisions: 
 *     $Log: Battleship.java,v $
 *     Revision 1.1  2013/09/18 19:22:34  agn3691
 *     Initial revision
 *
 *
 */

d11 1
d31 1
a31 1
        Scanner s = null;
d35 1
a35 1
            s = new Scanner( new BufferedReader ( new FileReader( fileName ) ) );
d38 2
a39 2
            while (s.hasNext()) {
                System.out.println( s.next() );
d43 1
a43 1
            System.err.println( "Cannot open file " + fileName );
d46 2
a47 2
            if (s != null) {
                s.close(); // close the file
d54 18
a71 1
}@


1.2.1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
 *     $Id: Battleship.java,v 1.2 2013/09/18 20:37:41 agn3691 Exp agn3691 $
d8 1
a8 4
 *     $Log: Battleship.java,v $
 *     Revision 1.2  2013/09/18 20:37:41  agn3691
 *     Added PrintWriter object to print output to given source.
 *
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *     $Log$
d25 3
a27 1
    private static Board board;
d29 1
d35 1
a35 1
            board = new Board( size, size, System.out );
@
