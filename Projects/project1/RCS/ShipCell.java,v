head	1.10;
access;
symbols;
locks
	agn3691:1.10; strict;
comment	@# @;


1.10
date	2013.09.22.00.25.41;	author agn3691;	state Exp;
branches;
next	1.9;

1.9
date	2013.09.21.22.45.30;	author agn3691;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.21.22.13.31;	author agn3691;	state Exp;
branches;
next	1.7;

1.7
date	2013.09.21.22.11.14;	author agn3691;	state Exp;
branches;
next	1.6;

1.6
date	2013.09.21.18.41.37;	author agn3691;	state Exp;
branches;
next	1.5;

1.5
date	2013.09.21.07.15.56;	author agn3691;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.21.02.13.10;	author agn3691;	state Exp;
branches;
next	1.3;

1.3
date	2013.09.19.23.26.25;	author agn3691;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.17.16.33.37;	author agn3691;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.15.22.20.40;	author agn3691;	state Exp;
branches;
next	;


desc
@ShipCell is a subclass of cell and represents a ship cell on the battleship board.
@


1.10
log
@comments
@
text
@/**
 * The ShipCell class represents a water cell object on the battleship board.
 * 
 * @@author Andy Nguyen
 */

public class ShipCell extends Cell {

   /**
    * The Ship object associated with the cell.
    */
    private Ship ship = null;

    /**
     *  Indicates if the cell should be hidden or not.
     */
    private static boolean hidden = true;

    /**
     * A constructor for a ShipCell object. It accepts the x and y coordinates for the cell.
     * 
     * @@param      myShip      the ship associated with the cell
     */
    public ShipCell( Ship myShip ) {
        ship = myShip;
        display = DEFAULTDISPLAY;
    }

   /**
     * Simulate cell hit by changing the cell display.
     * 
     * @@return      returns an int indicating result of hit
     */
    public int hit() {
        if( cellHit ) {
            return SAME;
        }

        display = "X";
        cellHit = true;
        ship.hit();

        if( ship.isSunk() ) {
            return SUNK;
        }

        return HIT;
    }

   /**
     * @@param      hide      set cell display to hidden
     */
    public static void setHidden( boolean hide ) {
        hidden = hide;
    }


    /**
     * @@return      string representing the cell
     */
    public String toString() {
        if( hidden ){
            return display;
        }
        else {
            return ship.getMarker();
        }
    }


}

/*
 * ShipCell.java
 * 
 * Version: 
 *     $Id: ShipCell.java,v 1.9 2013/09/21 22:45:30 agn3691 Exp agn3691 $
 * 
 * Revisions: 
 *     $Log: ShipCell.java,v $
 *     Revision 1.9  2013/09/21 22:45:30  agn3691
 *     More comments.
 *
 *     Revision 1.8  2013/09/21 22:13:31  agn3691
 *     More comments.
 *
 *     Revision 1.7  2013/09/21 22:11:14  agn3691
 *     Added comments for methods.
 *
 *     Revision 1.6  2013/09/21 18:41:37  agn3691
 *     Turned some message strings to constants.
 *
 *     Revision 1.4  2013/09/21 02:13:10  agn3691
 *     Implemented methods
 *
 *     Revision 1.3  2013/09/19 23:26:25  agn3691
 *     Implemented abstract methods from Cell class.
 *
 *     Revision 1.2  2013/09/17 16:33:37  agn3691
 *     Added method setDisplay.
 *
 *
 */@


1.9
log
@More comments.
@
text
@d77 1
a77 1
 *     $Id: ShipCell.java,v 1.8 2013/09/21 22:13:31 agn3691 Exp agn3691 $
d80 4
a83 1
 *     $Log: ShipCell.java,v $
@


1.8
log
@More comments.
@
text
@a50 2
     * Set hidden to true of false. No ship letters are shown if hidden is true.
     * 
a58 2
     * Return string representation of the cell
     * 
d77 1
a77 1
 *     $Id: ShipCell.java,v 1.7 2013/09/21 22:11:14 agn3691 Exp agn3691 $
d81 3
@


1.7
log
@Added comments for methods.
@
text
@d60 5
d81 1
a81 1
 *     $Id: ShipCell.java,v 1.6 2013/09/21 18:41:37 agn3691 Exp agn3691 $
d85 3
@


1.6
log
@Turned some message strings to constants.
@
text
@a7 4
    /**
     * Message to display when ship is sunk.
     */
    public static final String SUNKMSG = "Sunk!";
d29 6
a34 1
    public String hit() {
d36 1
a36 1
            return ALREADYHITMSG;
d44 1
a44 1
            return SUNKMSG;
d47 1
a47 1
        return HITMSG;
d50 5
d76 1
a76 1
 *     $Id: ShipCell.java,v 1.4 2013/09/21 02:13:10 agn3691 Exp agn3691 $
d80 3
@


1.5
log
@Added additional class variable for storing display. Changed hit() method to return proper messages.
@
text
@d8 4
d17 1
d43 1
a43 1
            return "Sunk!";
@


1.4
log
@Implemented methods
@
text
@a8 2


d13 4
d25 1
d29 12
d44 5
d50 6
a55 1
        return ship.getMarker();
d65 1
a65 1
 *     $Id: ShipCell.java,v 1.3 2013/09/19 23:26:25 agn3691 Exp agn3691 $
d69 3
@


1.3
log
@Implemented abstract methods from Cell class.
@
text
@a0 14
/*
 * ShipCell.java
 * 
 * Version: 
 *     $Id: ShipCell.java,v 1.2 2013/09/17 16:33:37 agn3691 Exp agn3691 $
 * 
 * Revisions: 
 *     $Log: ShipCell.java,v $
 *     Revision 1.2  2013/09/17 16:33:37  agn3691
 *     Added method setDisplay.
 *
 *
 */

d9 6
a14 2
    private static char shipCount = 'A'; // letter to set the new ship to
    private char shipLetter; // letter to display on the board to represent the ship
d19 1
a19 2
     * @@param      x      x-coordinate
     * @@param      y      y-coordinate 
d21 2
a22 5
    public ShipCell( int x, int y ) {
        super( x, y );
        shipLetter = shipCount;
        shipCount += 1;
        setDisplay( shipLetter );
d25 2
a26 3
    public void hitCell() {
        super.hitCell();
        setDisplay('X');
d29 6
d36 16
a51 1
}@


1.2
log
@Added method setDisplay.
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *     $Log$
@


1.1
log
@Initial revision
@
text
@d20 3
a22 1
    private boolean hit = false; // indicates if ship cell is hit
d31 3
d36 3
a38 10
    public void setHit( boolean bool ) {
        hit = bool;
    }

    public boolean isHit() {
        return hit;
    }

    public String toString() {
        return "ShipCell"; 
@
