head	1.3;
access;
symbols;
locks
	andy:1.3; strict;
comment	@# @;


1.3
date	2013.11.06.19.41.31;	author andy;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.06.18.41.10;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2013.11.06.04.45.08;	author andy;	state Exp;
branches;
next	;


desc
@CSX Project 2 Part 1
@


1.3
log
@Implemented main method.
Added error checking.
@
text
@/**
 * The Clock class represents a clock puzzle. The Solver class is used to solve the puzzle.
 *
 * @@author Andy Nguyen
 */

import java.util.*;

public class Clock implements Puzzle {
    
    private int start = 0;
    private int goal = 0;
    private int hours = 0;

    public static void main( String args[] ) throws NumberFormatException {
        if( args.length > 2 ) {
            try{
                int clockHours = Integer.parseInt( args[0] );
                int clockStart = Integer.parseInt( args[1] );
                int clockGoal = Integer.parseInt( args[2] );

                // make sure hours, goal, start are valid
                if( clockHours > 0 && clockStart > 0 && clockGoal > 0 ) { 
                    Clock clockPuzzle = new Clock( clockHours, clockStart, clockGoal );
                    Solver solver = new Solver( clockPuzzle );
                    solver.printSolution( solver.findSolution() );
                }
                else {
                    System.err.println( "Invalid arguments." );
                }
            }
            catch( NumberFormatException e ) {
                System.err.println( "Invalid arguments." );
            }
        }
        else {
            System.err.println( "Usage: java Clock hours start goal" );
        }
    }

    public Clock( int hours, int start, int goal ) {
        this.hours = hours;
        this.start = start;
        this.goal = goal;
    }

    public int getStart() {
        return start;
    }

    public int getGoal() {
        return goal;
    }

    public int getHours() {
        return hours;
    }

    public ArrayList<Integer> getNeighbors( int config ) {

        int forward, backward; // neighbors
        // create list of neighbors
        ArrayList<Integer> neighbors = new ArrayList<Integer>();

        // an empty list will be returned if start/goal is not <= hours
        if( start <= hours && goal <= hours ) {
            if( config == hours ) {
                forward = 1;
                backward = config - 1;
            }
            else if( config == 1 ) {
                forward = config + 1;
                backward = hours;
            }
            else {
                forward = config + 1;
                backward = config - 1;
            }

            neighbors.add( forward );
            neighbors.add( backward );
        }
        
        return neighbors;
    }

    public String toString() {
        return "Hours: " + hours + "\nStart: " + start +"\nGoal: " + goal; 
    }

}


/*
 * Clock.java
 * 
 * Version: 
 *     $Id: Clock.java,v 1.2 2013/11/06 18:41:10 andy Exp andy $
 * 
 * Revisions: 
 *     $Log: Clock.java,v $
 *     Revision 1.2  2013/11/06 18:41:10  andy
 *     Implemented methods.
 *
 *     Revision 1.1  2013/11/06 04:45:08  andy
 *     Initial revision
 *
 *
 */@


1.2
log
@Implemented methods.
@
text
@d11 3
a13 3
    private int start;
    private int goal;
    private int hours;
d15 1
a15 1
    public static void main( String args[] ) {
d17 18
a34 1

a40 6
    public Clock() {
        start = 0;
        goal = 0;
        hours = 0;
    }

d60 1
d62 17
d80 2
a81 3
        if( config == hours ) {
            forward = 1;
            backward = config - 1;
a82 13
        else if( config == 1 ) {
            forward = config + 1;
            backward = hours;
        }
        else {
            forward = config + 1;
            backward = config - 1;
        }

        // create list of neighbors
        ArrayList<Integer> neighbors = new ArrayList<Integer>();
        neighbors.add( forward );
        neighbors.add( backward );
d87 3
d98 1
a98 1
 *     $Id: Clock.java,v 1.1 2013/11/06 04:45:08 andy Exp andy $
d102 3
@


1.1
log
@Initial revision
@
text
@d2 1
d8 1
d10 13
d25 4
d30 4
d37 1
a37 1
        return 0;
d41 5
a45 1
        return 0;
d49 21
a69 1
        return null;
d80 1
a80 1
 *     $Id$
d83 4
a86 1
 *     $Log$
@
